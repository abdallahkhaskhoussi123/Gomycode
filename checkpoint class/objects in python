{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO3d4Gw7dIc9cYMMRno4I0h",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/abdallahkhaskhoussi123/Gomycode/blob/main/checkpoint%20class/objects%20in%20python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y6Jl3g3JI88K",
        "outputId": "9cb41524-c9f8-4e30-b558-fd30ee61fd6d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3)\n"
          ]
        }
      ],
      "source": [
        "class Point3D:\n",
        "    def __init__(self, x, y, z):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "        self.z = z\n",
        "    def __repr__(self):\n",
        "        return f\"({self.x}, {self.y}, {self.z})\"\n",
        "my_point = Point3D(1, 2, 3)\n",
        "print(my_point)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "    def __init__(self, length, width):\n",
        "        self.length = length\n",
        "        self.width = width\n",
        "\n",
        "    def area(self):\n",
        "        return self.length * self.width\n",
        "\n",
        "    def perimeter(self):\n",
        "        return 2 * (self.length + self.width)\n",
        "my_rectangle = Rectangle(4, 3)\n",
        "print(\"Area:\", my_rectangle.area())\n",
        "print(\"Perimeter:\", my_rectangle.perimeter())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KBPPp8iDaNsK",
        "outputId": "26c3720e-4392-4b71-f80d-a44b52b0e418"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area: 12\n",
            "Perimeter: 14\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "class Circle:\n",
        "    def __init__(self, center_x, center_y, radius):\n",
        "        self.center_x = center_x\n",
        "        self.center_y = center_y\n",
        "        self.radius = radius\n",
        "\n",
        "    def area(self):\n",
        "        return math.pi * self.radius**2\n",
        "\n",
        "    def perimeter(self):\n",
        "        return 2 * math.pi * self.radius\n",
        "\n",
        "    def is_inside(self, x, y):\n",
        "        distance_sq = (x - self.center_x)**2 + (y - self.center_y)**2\n",
        "        return distance_sq <= self.radius**2\n",
        "my_circle = Circle(0, 0, 5)\n",
        "print(\"Area:\", my_circle.area())\n",
        "print(\"Perimeter:\", my_circle.perimeter())\n",
        "print(\"Is (3, 4) inside the circle?\", my_circle.is_inside(3, 4))\n",
        "print(\"Is (6, 6) inside the circle?\", my_circle.is_inside(6, 6))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thQ7tvdVbYj2",
        "outputId": "e51e1343-51dc-414f-9d2e-c050c8c31f5d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area: 78.53981633974483\n",
            "Perimeter: 31.41592653589793\n",
            "Is (3, 4) inside the circle? True\n",
            "Is (6, 6) inside the circle? False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Bank:\n",
        "    def __init__(self, balance=0):\n",
        "        self.balance = balance\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        self.balance += amount\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if amount <= self.balance:\n",
        "            self.balance -= amount\n",
        "        else:\n",
        "            print(\"Insufficient balance.\")\n",
        "my_bank = Bank(1000)\n",
        "print(\"Initial balance:\", my_bank.balance)\n",
        "my_bank.deposit(500)\n",
        "print(\"After deposit:\", my_bank.balance)\n",
        "my_bank.withdraw(800)\n",
        "print(\"After withdrawal:\", my_bank.balance)\n",
        "my_bank.withdraw(1000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s8CCYOABb5zd",
        "outputId": "e14dff97-86f4-49bf-e2cd-22d5d1c233b8"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial balance: 1000\n",
            "After deposit: 1500\n",
            "After withdrawal: 700\n",
            "Insufficient balance.\n"
          ]
        }
      ]
    }
  ]
}